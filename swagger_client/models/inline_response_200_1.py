# coding: utf-8

"""
    Arbitrage Watcher RESTful API

    Provides the set of endpoints to manage arbitrage watcher service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_parameters=None, is_started=None, last_start_time=None):
        """
        InlineResponse2001 - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_parameters': 'InlineResponse2001CurrentParameters',
            'is_started': 'bool',
            'last_start_time': 'float'
        }

        self.attribute_map = {
            'current_parameters': 'current_parameters',
            'is_started': 'is_started',
            'last_start_time': 'last_start_time'
        }

        self._current_parameters = current_parameters
        self._is_started = is_started
        self._last_start_time = last_start_time

    @property
    def current_parameters(self):
        """
        Gets the current_parameters of this InlineResponse2001.

        :return: The current_parameters of this InlineResponse2001.
        :rtype: InlineResponse2001CurrentParameters
        """
        return self._current_parameters

    @current_parameters.setter
    def current_parameters(self, current_parameters):
        """
        Sets the current_parameters of this InlineResponse2001.

        :param current_parameters: The current_parameters of this InlineResponse2001.
        :type: InlineResponse2001CurrentParameters
        """

        self._current_parameters = current_parameters

    @property
    def is_started(self):
        """
        Gets the is_started of this InlineResponse2001.

        :return: The is_started of this InlineResponse2001.
        :rtype: bool
        """
        return self._is_started

    @is_started.setter
    def is_started(self, is_started):
        """
        Sets the is_started of this InlineResponse2001.

        :param is_started: The is_started of this InlineResponse2001.
        :type: bool
        """

        self._is_started = is_started

    @property
    def last_start_time(self):
        """
        Gets the last_start_time of this InlineResponse2001.

        :return: The last_start_time of this InlineResponse2001.
        :rtype: float
        """
        return self._last_start_time

    @last_start_time.setter
    def last_start_time(self, last_start_time):
        """
        Sets the last_start_time of this InlineResponse2001.

        :param last_start_time: The last_start_time of this InlineResponse2001.
        :type: float
        """

        self._last_start_time = last_start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
