# coding: utf-8

"""
    Arbitrage Watcher RESTful API

    Provides the set of endpoints to manage arbitrage watcher service.

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2001CurrentParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bank_fee=0.007, default_market_update_rate=20, fiat_update_delay=None, market_expiration_time=None, markets=None, max_tx_volume=10.0, observers=None, refresh_rate=20, report_queue='arbitrage_watcher', amqp_url=None):
        """
        InlineResponse2001CurrentParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bank_fee': 'float',
            'default_market_update_rate': 'int',
            'fiat_update_delay': 'int',
            'market_expiration_time': 'int',
            'markets': 'list[str]',
            'max_tx_volume': 'float',
            'observers': 'list[str]',
            'refresh_rate': 'int',
            'report_queue': 'str',
            'amqp_url': 'str'
        }

        self.attribute_map = {
            'bank_fee': 'bank_fee',
            'default_market_update_rate': 'default_market_update_rate',
            'fiat_update_delay': 'fiat_update_delay',
            'market_expiration_time': 'market_expiration_time',
            'markets': 'markets',
            'max_tx_volume': 'max_tx_volume',
            'observers': 'observers',
            'refresh_rate': 'refresh_rate',
            'report_queue': 'report_queue',
            'amqp_url': 'amqp_url'
        }

        self._bank_fee = bank_fee
        self._default_market_update_rate = default_market_update_rate
        self._fiat_update_delay = fiat_update_delay
        self._market_expiration_time = market_expiration_time
        self._markets = markets
        self._max_tx_volume = max_tx_volume
        self._observers = observers
        self._refresh_rate = refresh_rate
        self._report_queue = report_queue
        self._amqp_url = amqp_url

    @property
    def bank_fee(self):
        """
        Gets the bank_fee of this InlineResponse2001CurrentParameters.
        Bank fees accounting at conversion

        :return: The bank_fee of this InlineResponse2001CurrentParameters.
        :rtype: float
        """
        return self._bank_fee

    @bank_fee.setter
    def bank_fee(self, bank_fee):
        """
        Sets the bank_fee of this InlineResponse2001CurrentParameters.
        Bank fees accounting at conversion

        :param bank_fee: The bank_fee of this InlineResponse2001CurrentParameters.
        :type: float
        """

        self._bank_fee = bank_fee

    @property
    def default_market_update_rate(self):
        """
        Gets the default_market_update_rate of this InlineResponse2001CurrentParameters.
        Default market's depth update rate in seconds

        :return: The default_market_update_rate of this InlineResponse2001CurrentParameters.
        :rtype: int
        """
        return self._default_market_update_rate

    @default_market_update_rate.setter
    def default_market_update_rate(self, default_market_update_rate):
        """
        Sets the default_market_update_rate of this InlineResponse2001CurrentParameters.
        Default market's depth update rate in seconds

        :param default_market_update_rate: The default_market_update_rate of this InlineResponse2001CurrentParameters.
        :type: int
        """

        self._default_market_update_rate = default_market_update_rate

    @property
    def fiat_update_delay(self):
        """
        Gets the fiat_update_delay of this InlineResponse2001CurrentParameters.
        Delay in seconds between an exchange rate updates

        :return: The fiat_update_delay of this InlineResponse2001CurrentParameters.
        :rtype: int
        """
        return self._fiat_update_delay

    @fiat_update_delay.setter
    def fiat_update_delay(self, fiat_update_delay):
        """
        Sets the fiat_update_delay of this InlineResponse2001CurrentParameters.
        Delay in seconds between an exchange rate updates

        :param fiat_update_delay: The fiat_update_delay of this InlineResponse2001CurrentParameters.
        :type: int
        """

        self._fiat_update_delay = fiat_update_delay

    @property
    def market_expiration_time(self):
        """
        Gets the market_expiration_time of this InlineResponse2001CurrentParameters.
        Markets order book expiration time

        :return: The market_expiration_time of this InlineResponse2001CurrentParameters.
        :rtype: int
        """
        return self._market_expiration_time

    @market_expiration_time.setter
    def market_expiration_time(self, market_expiration_time):
        """
        Sets the market_expiration_time of this InlineResponse2001CurrentParameters.
        Markets order book expiration time

        :param market_expiration_time: The market_expiration_time of this InlineResponse2001CurrentParameters.
        :type: int
        """

        self._market_expiration_time = market_expiration_time

    @property
    def markets(self):
        """
        Gets the markets of this InlineResponse2001CurrentParameters.
        List of market names

        :return: The markets of this InlineResponse2001CurrentParameters.
        :rtype: list[str]
        """
        return self._markets

    @markets.setter
    def markets(self, markets):
        """
        Sets the markets of this InlineResponse2001CurrentParameters.
        List of market names

        :param markets: The markets of this InlineResponse2001CurrentParameters.
        :type: list[str]
        """

        self._markets = markets

    @property
    def max_tx_volume(self):
        """
        Gets the max_tx_volume of this InlineResponse2001CurrentParameters.
        The max money volume that can be involved into transfer

        :return: The max_tx_volume of this InlineResponse2001CurrentParameters.
        :rtype: float
        """
        return self._max_tx_volume

    @max_tx_volume.setter
    def max_tx_volume(self, max_tx_volume):
        """
        Sets the max_tx_volume of this InlineResponse2001CurrentParameters.
        The max money volume that can be involved into transfer

        :param max_tx_volume: The max_tx_volume of this InlineResponse2001CurrentParameters.
        :type: float
        """

        self._max_tx_volume = max_tx_volume

    @property
    def observers(self):
        """
        Gets the observers of this InlineResponse2001CurrentParameters.
        List of opportunity observers names

        :return: The observers of this InlineResponse2001CurrentParameters.
        :rtype: list[str]
        """
        return self._observers

    @observers.setter
    def observers(self, observers):
        """
        Sets the observers of this InlineResponse2001CurrentParameters.
        List of opportunity observers names

        :param observers: The observers of this InlineResponse2001CurrentParameters.
        :type: list[str]
        """

        self._observers = observers

    @property
    def refresh_rate(self):
        """
        Gets the refresh_rate of this InlineResponse2001CurrentParameters.
        Update rate in seconds of the arbiter's main loop

        :return: The refresh_rate of this InlineResponse2001CurrentParameters.
        :rtype: int
        """
        return self._refresh_rate

    @refresh_rate.setter
    def refresh_rate(self, refresh_rate):
        """
        Sets the refresh_rate of this InlineResponse2001CurrentParameters.
        Update rate in seconds of the arbiter's main loop

        :param refresh_rate: The refresh_rate of this InlineResponse2001CurrentParameters.
        :type: int
        """

        self._refresh_rate = refresh_rate

    @property
    def report_queue(self):
        """
        Gets the report_queue of this InlineResponse2001CurrentParameters.
        The name of the response queue

        :return: The report_queue of this InlineResponse2001CurrentParameters.
        :rtype: str
        """
        return self._report_queue

    @report_queue.setter
    def report_queue(self, report_queue):
        """
        Sets the report_queue of this InlineResponse2001CurrentParameters.
        The name of the response queue

        :param report_queue: The report_queue of this InlineResponse2001CurrentParameters.
        :type: str
        """

        self._report_queue = report_queue

    @property
    def amqp_url(self):
        """
        Gets the amqp_url of this InlineResponse2001CurrentParameters.
        Connection url to the amqp broker

        :return: The amqp_url of this InlineResponse2001CurrentParameters.
        :rtype: str
        """
        return self._amqp_url

    @amqp_url.setter
    def amqp_url(self, amqp_url):
        """
        Sets the amqp_url of this InlineResponse2001CurrentParameters.
        Connection url to the amqp broker

        :param amqp_url: The amqp_url of this InlineResponse2001CurrentParameters.
        :type: str
        """

        self._amqp_url = amqp_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2001CurrentParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
